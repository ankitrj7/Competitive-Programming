#include<bits/stdc++.h>
using namespace std;
struct node{
   int data;
   node * left;
   node * right;
};
node * createnode(int data)
{
    node * p = new node();
    p->data = data;
    p->left =NULL;
    p->right = NULL;
    return p;
}
bool IsEquivalent(node * r1,node * r2)
{
    if(r1==NULL&&r2==NULL)
    return true;
    if(r1==NULL||r2==NULL)
    return false;
    else
    {
        return r1->data==r2->data&&IsEquivalent(r1->left,r2->left)
        && IsEquivalent(r1->right,r2->right);
    }
}
bool IsSubtree(node *s,node * t)
{
    if(s==NULL)
    {
        return true;
    }
    if(t==NULL)
    {
        return false;
    }
    return (IsEquivalent(s,t) || IsSubtree(s,t->left)||IsSubtree(s,t->right));
}
int main()
{
    node *T = createnode(26);  
    T->right         = createnode(3);  
    T->right->right = createnode(3);  
    T->left         = createnode(10);  
    T->left->left     = createnode(4);  
    T->left->left->right = createnode(30);  
    T->left->right     = createnode(6);  
    node *S = createnode(10);  
    S->right     = createnode(6);  
    S->left     = createnode(4);  
    S->left->right = createnode(30);  
    if(IsSubtree(S,T))
    cout<<"Yes"<<endl;
    else
    cout<<"No"<<endl;
}